slug: docker-container-lifecycle
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/docker.png
title: Docker - Container Lifecycle
teaser: Your first steps into the magical Docker Wonderland
description: |-
  This track will teach you what Docker is, and get you started with a number of basic operations that you will need to start using it.

  When you have finished this track, you will be able to start and stop containers, interact with running containers and learn some other neat tricks.

  ## What is Docker?
  Docker lets you run programs in containers that are isolated from other programs that run on the same machine. It does this in a way that all containers on a machine can share the OS and kernel of that machine. This means that the footprint of a container is much smaller than that of a virtual machine, and that it can start much faster. After all, the host OS is already running, and it only has to run once.

  ![Docker Basics visualization](https://storage.googleapis.com/instruqt-frontend/img/tracks/content/docker-basics.png)

  ## The Docker CLI
  The most straightforward way to interact with Docker is through its command-line interface (CLI). It allows you to do all kinds of things with containers, like starting, stopping and inspecting them. The CLI can be run using the `docker` command and has an extensive help system built in, which can be invoked by sticking `--help` or `COMMAND --help` to it. (try running `docker run --help` to check out what superpowers are available to you)

  ## Ready for action?
  Great, check out the challenges to the right and jump right in!
tags:
- docker
- containers
challenges:
- slug: hello-world
  credits: 10
  title: Hello world!
  teaser: Your first Docker container.
  notes:
  - type: text
    title: Starting containers
    contents: |-
      As you know by now because you're smart and you paid attention, you can use the Docker CLI to start containers. There are a few ways that you can do this, but the one you are most likely to use is simply `docker run`.
  - type: text
    title: Where do containers come from?
    contents: |-
      You may be wondering how it is possible to run a container that doesn't exist yet. Ofcourse we can start muttering about the birds and the bees, but since we're all grownups (or close enough) we guess we can just explain how containers recreate.

      If you assumed that to start a container you first have to create it, you would be correct. The Docker CLI has a separate command for this, but since the `run` command conveniently creates a container for you if it doesn't exist, in most instances you won't really need it.

      Ofcourse that still leaves the question open what you need to create a container. The answer is an *image*. We will leave the details for later, the only thing you really need to remember is that to run a container, you need an image.
  - type: text
    title: Diving into the deep end
    contents: |-
      That's all the theory you need to do the challenge. If you think you've got this, or if you are the adventurous type, click the 'Start challenge' button below.

      If you're not yet entirely confident, don't worry. Just go back and re-read until you think you're ready. We'll be waiting to cheer you on!
  assignment: |-
    Alrighty! With all that incredibly interesting theory out of the way, it's time to run our first container. Docker kindly provides you with an image that's just perfect for this, it's called `hello-world`.

    ## Your assignment
    Try to run the `hello-world` image and see what happens.

    ## Hints
    - Click the 'Check' button to have our robot hamsters check whether you've done it right
    - Check out the [`hello-world` image on Docker Hub](https://hub.docker.com/_/hello-world/)
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - getting-interactive
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: getting-interactive
  credits: 10
  title: Getting interactive
  teaser: Interacting with a container.
  notes:
  - type: text
    title: Ways to run a container
    contents: |-
      If you've lazy like us, you used a plain `docker run` to complete the first assignment. However, there are multiple ways to run a container, and we're going to tell you about some of them now.
  - type: text
    title: Run flags
    contents: |-
      First of all, your first `docker run` command wasn't very interactive. We want to change that, but for that you need to know about the interactive flag (`-i` or `--interactive`), which keeps your container alive in most cases that you care about.

      By itself, the interactive flag doesn't do much. This has to do with the fact that most command-line executables need something called a TTY to communicate with the outside world. Conveniently, Docker also has a flag for that: the TTY flag (`-t` or `-tty`).
  - type: text
    title: Putting it together
    contents: |-
      You've just learned about the interactive and the TTY flags. Let's learn us a mmnemonic!

      Together, the short versions of the flag form the word 'it'. So you can just tell Docker to `run it` and add a dash: `docker run -it`. As simple as that!

      That's it, you should now be able to start a container and interact with it.
  assignment: |-
    So far you have only seen a container run and exit immediately. Now it's time to inspect it a little closer.

    Run the container from the image 'alpine' in interactive mode and take a look around.

    ## Hints
    - See the [Docker run reference](https://docs.docker.com/engine/reference/commandline/run/)
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - moving-into-the-background
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: moving-into-the-background
  credits: 10
  title: Moving into the background
  teaser: Let your containers roam freely.
  notes:
  - type: text
    title: Detach it
    contents: |-
      So far you have only seen containers that wrote output to your shell. But it's entirely possible that someday you want to start a container and then go do something else.

      Docker has another flag for this: the detach flag (`-d` or `--detached`). It runs the container in the background and gives you back control over your shelackground and gives you back control over your shell.
  - type: text
    title: Interactive detachment
    contents: |-
      Remember that the interactive flag keeps your container alive in certain cases? This is one of those cases where you need it. If you use the detach flag by itself, the container will die immediately.

      So you'll need to combine the detach flag with the interactive flag. No fancy mnemonic here, just `id` it.
  assignment: |-
    Run a container from the image 'alpine' in detached mode and verify that it is running.

    ## Hints
    - See the [Docker run reference](https://docs.docker.com/engine/reference/commandline/run/)
    - Use `docker ps` to list all running containers
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - naming-containers
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: naming-containers
  credits: 10
  title: Naming your containers
  teaser: Give names to your favorite containers.
  notes:
  - type: text
    title: Container names
    contents: |-
      If you have used `docker ps`, you may have noticed that containers always have names even when you don't explicitly name them.

      This is because Docker will make up a name for each container if you don't specify one. It does this by randomly grabbing an adjective (e.g. 'lazy') from a pool and attaching a scientist's name to it. It's really cute.
  - type: text
    title: Take control
    contents: |-
      Sometimes you want more control over your container names, for example if you are writing scripts. Docker lets you do this with the name flag (`--name`, no short version this time)
  assignment: |-
    Run the Alpine image in detached mode and name it `oscar`.

    Then list the running containers and take a look at how it is displayed.

    ## Hints
    - See the [Docker CLI reference](https://docs.docker.com/engine/reference/commandline/run/)
    - Use `docker ps` to list all running containers
    - Be sure not to get too attached to Oscar. We won't tell you why.
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - killing-containers
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: killing-containers
  credits: 10
  title: Killing containers
  teaser: Sometimes you got to let them go...
  notes:
  - type: text
    title: Killing containers
    contents: |-
      What if you want to get rid of those pesky detached containers? Docker has two ways to do this: `kill` and `stop`.

      Of these 2, `stop` is the more subtle one, but it doesn't make for a great headline, so we focus on `kill`. Just feed it a container name or id.
  - type: text
    title: Just stop it
    contents: |-
      `docker stop` basically does the same thing, but uses a different signal (SIGTERM instead of SIGKILL). So depending on how your applications handles those signals, you may want to use or the other.
  assignment: |-
    Remember that we told you not to get too attached to Oscar? The reason for that is that you're going to have to kill it.

    Sorry, but we did warn you.

    While you're at it, also `stop crying`.

    ## Hints
    - Use `docker ps` to list all running containers and note their names and ids
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - reviving-containers
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: reviving-containers
  credits: 10
  title: Reviving containers
  teaser: Bring your containers back from the dead.
  notes:
  - type: text
    title: Reviving containers
    contents: |-
      When your container has died for whatever reason (Somebody killed it? Why would anyone do that?) it is easy to bring it back to life with the `start` command.

      If the container is able to sustain itself, it will stay alive, too.
  assignment: |-
    Ofcourse we would never make you kill Oscar if we didn't have a backup plan. You can revive killed or stopped containers, so let's get Oscar back on his feet.

    ## Hints
    - Use `docker ps -a` to list all containers, including exited ones
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - cleaning-up
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: cleaning-up
  credits: 10
  title: Cleaning up
  teaser: Party's over, let's clean up after ourselves.
  notes:
  - type: text
    title: Cleaning up
    contents: |-
      If a container has stopped, it will keep taking precious space on your Docker machine. It is however possible to remove it with the `rm` command.

      Note that this will only work with stopped containers, live ones will resist being removed from the premises. (Unless you use the `--force` ];])
  assignment: |-
    We have some `trash` lying around, let's clean it up.

    ## Hints
    - Use `docker ps -a` to list all containers, including exited ones
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks: []
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
developers:
- alindeboom@xebia.com
