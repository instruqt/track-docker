slug: docker-container-lifecycle
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/docker.png
title: Docker - Container Lifecycle
teaser: Your first steps into the magical Docker Wonderland
description: |-
  This track will teach you what Docker is, and get you started with a number of basic operations that you will need to start using it.

  When you have finished this track, you will be able to start and stop containers, interact with running containers and learn some other neat tricks. But first, some background information that will come in handy.

  ## What is Docker?
  Docker lets you run programs in containers that are isolated from other programs that run on the same machine. It does this in a way that all containers on a machine can share the OS and kernel of that machine. This means that the footprint of a container is much smaller than that of a virtual machine, and that it can start much faster. After all, the host OS is already running, and it also only has to run once.

  It is possible to run multiple processes in a container. But because containers are so small, and they can talk to each other, we generally try to keep the number of processes in a container as close to 1 as possible. So, for example, if you have an application and a database, you wouldn't run them in one container, but in two separate ones.
  ![Docker Basics visualization](https://storage.googleapis.com/instruqt-frontend/img/tracks/content/docker-basics.png)

  Ready for action? Great, you can check out the challenges to the right and jump right in when you're ready.
tags:
- docker
- containers
challenges:
- slug: hello-world
  credits: 10
  title: Hello world!
  teaser: Your first Docker container.
  notes:
  - type: text
    title: Running containers
    contents: It's basically like a mini-VM, but different.
  assignment: |-
    Alrighty! With all that incredibly interesting theory out of the way, it's time to run our first container. Docker kindly provides you with an image that's just perfect for this, it's called `hello-world`.

    ## Your assignment
    Try to run the `hello-world` image and see what happens.

    ## Hints
    - Click the 'Check' button to have our robot hamsters check whether you've done it right
    - Check out the [`hello-world` image on Docker Hub](https://hub.docker.com/_/hello-world/)
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - getting-interactive
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: getting-interactive
  credits: 10
  title: Getting interactive
  teaser: Take a look inside your container.
  notes:
  - type: text
    title: Getting interactive
    contents: |-
      The contents of the note.

      You can use any GitHub flavoured markdown.
  assignment: |-
    Run the container from the image 'alpine' in interactive mode and take a look around.

    ## Hints
    See the [Docker CLI reference](https://docs.docker.com/engine/reference/commandline/run/)
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - moving-into-the-background
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: moving-into-the-background
  credits: 10
  title: Moving into the background
  teaser: Let your containers roam freely.
  notes:
  - type: text
    title: Moving into the background
    contents: |-
      The contents of the note.

      You can use any GitHub flavoured markdown.
  assignment: |-
    Run a container from the image 'alpine' in daemon mode and verify that it is running.

    ## Hints
    - See the [Docker CLI reference](https://docs.docker.com/engine/reference/commandline/run/)
    - Use `docker ps` to list all running containers
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - naming-containers
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: naming-containers
  credits: 10
  title: Naming your containers
  teaser: Give names to your favorite containers.
  notes:
  - type: text
    title: Naming your containers
    contents: |-
      The contents of the note.

      You can use any GitHub flavoured markdown.
  assignment: |-
    Run the Alpine image in interactive or daemon mode and name it `oscar`.

    If you're running it in daemon mode, take a look at how it is displayed.

    ## Hints
    - See the [Docker CLI reference](https://docs.docker.com/engine/reference/commandline/run/)
    - Use `docker ps` to list all running containers
    - Be sure not to get too attached to Oscar. You'll see why...
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - killing-containers
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: killing-containers
  credits: 10
  title: Killing containers
  teaser: Sometimes you got to let them go...
  notes:
  - type: text
    title: Killing containers
    contents: |-
      The contents of the note.

      You can use any GitHub flavoured markdown.
  assignment: |-
    Remember that we told you not to get too attached to Oscar? The reason for that is that you're going to have to kill it. Sorry, but we did warn you.

    While you're at it, also stop. `Hammertime`.

    ## Hints
    - Use `docker ps` to list all running containers and note their names
    - Check the docs for [docker kill](https://docs.docker.com/engine/reference/commandline/kill/) and [docker stop](https://docs.docker.com/engine/reference/commandline/stop/)
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - reviving-containers
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: reviving-containers
  credits: 10
  title: Reviving containers
  teaser: Bring your containers back from the dead.
  notes:
  - type: text
    title: Reviving containers
    contents: |-
      The contents of the note.

      You can use any GitHub flavoured markdown.
  assignment: |-
    Ofcourse we would never make you kill Oscar if we didn't have a backup plan. You can revive killed or stopped containers, so let's get him back on his feet.

    Hammertime can stay dead though.

    ## Hints
    - Use `docker ps -a` to list all containers, including exited ones
    - Check the [docs for the docker cli](https://docs.docker.com/engine/reference/commandline/docker)
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks:
  - cleaning-up
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
- slug: cleaning-up
  credits: 10
  title: Cleaning up
  teaser: Party's over, let's clean up after ourselves.
  notes:
  - type: text
    title: Cleaning up
    contents: |-
      The contents of the note.

      You can use any GitHub flavoured markdown.
  assignment: |-
    Our `hammertime` container is still lying around, but we don't want to see it again. Remove it from the premises.

    ## Hints
    - Use `docker ps -a` to list all containers, including exited ones
    - Check the [docs for the docker cli](https://docs.docker.com/engine/reference/commandline/docker)
  difficulty: basic
  timelimit: 300
  points: 50
  unlocks: []
  tabs:
    internal:
    - type: terminal
      title: Shell
      name: shell
      port: 8080
    external: []
developers:
- alindeboom@xebia.com
